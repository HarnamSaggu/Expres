Expres ====
	Features/Overview ====
		. variables
		. arrays
		.
		. snippet
		.
		. if
		.
		. for
		. while
		.
		. func
		. 	(+recursion)

		General Info ====
			semicolons will be used for the end of "lines"

		====

		Variables ====
			mutable variables
			data type can be inferred
			"
			> variableName, value

			> dataType: variableName
			"

			# PASS BY REFERENCE
			# WEAKLY TYPED

		Arrays ====
			mutable arrays
			data type is inferred
			"
			> arrayName[]

			> dataType: arrayName[]

			> arrayName[index], value
			"

			# PASS BY REFERENCE
			# WEAKLY TYPED

			and (like) kotlin intervals
			"
			> oneToTen, 1...10
			> oneUpToTen, 1../10
			"

		====

		Snippet ====
			i will use snippets of code, complied code which can be stored under the data type snippet
			"
			> snippet: snippetName, {code}
			"

		====

		If ====
			just plain old ifs
			"
			if(boolean, {body}, ...)
			"

		====

		For ====
			both for like in java and kotlin
			"
			for(array, counterName, {body})

			for(counterName, condition, variableChange, {body})
			"

		While ====
			normal while
			"
			while(condition, {body})
			"

		====

		[Function ====
			"
			> functionName(dataType: parameterName, ...), {code}
			"

			the rest is TODO, custom functions will be dealt with last]


	expres.Lexer & expres.Parser init notes ====
		Tokens ====
			. KEYWORD, any string starting with letters which isn't a string literal   ####
			. VARIABLE MUTATOR, ">" # ONLY IF AT THE START OF A 'LINE'                 ####
			. COMMA, ","                                                               ####
			. SEMICOLON, break ";"                                                     ####
			. SNIPPET START, "{"                                                       ####
			. SNIPPET END, "}"                                                         ####
			. NUMBER, anything string not in a string literal starting with a digit    ####
			. Operators ====
				. Maths ====
					. PLUS, "+"                                                          ####
					. MINUS, "-"                                                         ####
					. DIVIDE, "/"                                                        ####
					. MULTIPLY, "*"                                                      ####
					. MODULO, "%"                                                        ####
					. POWER, "^"                                                         ####
				. Logic ====
					. EQUALS, "="                                                        ####
					. LESS THAN, "<"                                                     ####
					. GREATER THAN, ">"                                                  ####
					. LESS EQUAL THAN, "<="                                              ####
					. GREATER EQUAL THAN, ">="                                           ####
					. NOT, "!"                                                           ####
					. OR, "|"                                                            ####
					. AND, "&"                                                           ####
			. OPEN BRACKET, "("                                                        ####
			. CLOSE BRACKET, ")"                                                       ####
			. OPEN INDEX, "["                                                          ####
			. CLOSE INDEX, "]"                                                         ####
			. TYPE INDICATOR, ":"                                                      ####
			. STRING LITERAL, """                                                      ####
			. INCLUSIVE INTERVAL, "..."                                                ####
         . EXCLUSIVE INTERVAL, "../"                                                ####

		Commands ====
			The parser will take a sentence (a list of tokens typically between semicolons) and then match it
			with a command.

			Command types ====
				. VARIABLE ASSIGNMENT WITH VALUE
				. ARRAY ASSIGNMENT WITH SIZE
				. ARRAY ASSIGNMENT
				. ARRAY ELEMENT ASSIGNMENT WITH VALUE
				. FUNCTION CALL
				(commands which are inherently returns of a value)
				. VARIABLE GETTER
				. ARRAY ELEMENT GETTER
				. OPERATION

		Bracket number ====
			Within a function call, the argument tokens are assigned a bracket number which corresponds
			with the number of open brackets preceding them